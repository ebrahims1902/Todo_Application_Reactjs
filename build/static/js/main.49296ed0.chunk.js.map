{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","props","List","className","ListItem","ListItemAvatar","ListItemText","primary","todo","secondary","onClick","event","collection","doc","id","delete","App","useState","todos","setTodos","input","setInput","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","value","onChange","target","Button","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wXAeeA,EAbKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,aACnBC,MAAO,0CACPC,cAAe,iBAGIC,YCMRC,MAbf,SAAcC,GACV,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,cACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAcC,QAASN,EAAMO,KAAKA,KAAMC,UAAU,oBAEtD,kBAAC,IAAD,CAAmBC,QAAS,SAAAC,GAAK,OAAIvB,EAAGwB,WAAW,SAASC,IAAIZ,EAAMO,KAAKM,IAAIC,cCuC5EC,MA7Cf,WAAgB,IAAD,EACaC,mBAAS,CAAC,IAAI,MAD3B,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAsBb,OAjBAC,qBAAU,WAERlC,EAAGwB,WAAW,SAASW,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC7DN,EAASM,EAASC,KAAKC,KAAI,SAAAd,GAAG,MAAK,CAAEC,GAAID,EAAIC,GAAIN,KAAMK,EAAIe,OAAOpB,eAEnE,IAaD,yBAAKL,UAAU,OACb,kCAEA,8BACE,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CAAOC,MAAOZ,EAAOa,SAAU,SAAAtB,GAAK,OAAIU,EAASV,EAAMuB,OAAOF,WAGhE,kBAACG,EAAA,EAAD,CAAQC,UAAWhB,EAAOiB,KAAK,SAAS3B,QAnB9B,SAACC,GACfA,EAAM2B,iBAENlD,EAAGwB,WAAW,SAAS2B,IAAI,CACzB/B,KAAMY,EACNoB,UAAWnD,IAASU,UAAU0C,WAAWC,oBAE3CrB,EAAS,KAYqDsB,QAAQ,YAAYC,MAAM,WAApF,aAIF,4BACG1B,EAAMS,KAAI,SAAAnB,GAAI,OACb,kBAAC,EAAD,CAAMA,KAAMA,UCjCFqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49296ed0.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyBBh_3_AjEfMmj7hGiWWG6zB31zG4lWvAU\",\n    authDomain: \"todo-app-5ede7.firebaseapp.com\",\n    databaseURL: \"https://todo-app-5ede7.firebaseio.com\",\n    projectId: \"todo-app-5ede7\",\n    storageBucket: \"todo-app-5ede7.appspot.com\",\n    messagingSenderId: \"2549708035\",\n    appId: \"1:2549708035:web:c9805a5e35bc6b86dba536\",\n    measurementId: \"G-GNHMVT5XMJ\"\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React from 'react'\nimport { List, ListItemText, ListItem, ListItemAvatar } from '@material-ui/core'\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport './Todo.css';\nimport db from './firebase';\n\nfunction Todo(props) {\n    return (\n        <List className=\"todo__list\">\n            <ListItem>\n                <ListItemAvatar></ListItemAvatar>\n                <ListItemText primary={props.todo.todo} secondary=\"Dummy deadline\" />\n            </ListItem>\n            <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()} />\n        </List>\n\n    )\n}\n\nexport default Todo\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core'\nimport Todo from './Todo'\nimport db from './firebase'\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState(['a','z']);\n  const [input, setInput] = useState('');\n  \n  // when the app loads, we need to listen to the database and fetch new todos as they get added/removed\n  useEffect(() => {\n    // this code here... fires when the app.js loads\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({ id: doc.id ,todo: doc.data().todo})))\n    })\n  }, []);\n\n\n  const addTodo = (event) => {\n    event.preventDefault(); // Will stop the REFRESH\n    // setTodos([...todos, input])\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput(''); // clear up the input after clicking add todo button \n  }\n  return (\n    <div className=\"App\">\n      <h1>Hi</h1>\n      \n      <form>\n        <FormControl>\n          <InputLabel>Write a Todo</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)} />\n        </FormControl>\n\n        <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\" >Add Todo</Button>\n      </form>  \n      \n      \n      <ul>\n        {todos.map(todo => (\n          <Todo todo={todo}/>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}